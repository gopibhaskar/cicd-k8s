#!groovy
def buildNumber
def workspace
def props=''
def tagName="""${JOB_NAME}-${BUILD_TIMESTAMP}"""
def commit_username
def commit_Email
def imageName

node {
    stage('Checkout Code') {
        props = readProperties file: """deploy.properties"""
        checkout scm
        sh 'export buildNum=${buildNumber}'
        sh 'git log --format="%ae" | head -1 > commit-author.txt'
        commit_Email = readFile('commit-author.txt').trim()
        sh 'git show -s --pretty=%an > committer.txt'
        commit_username = readFile('committer.txt').trim()
        buildNumber = """${BUILD_NUMBER}"""
        sh 'export buildNum=${BUILD_NUMBER}'
        echo buildNumber
        echo commit_username
        echo commit_Email
    }

    stage("Assemble Stage") {
        try {
            sh "./gradlew clean war"
            sh "./gradlew assemble"
        } catch (err) {
            currentBuild.result = 'FAILURE'
            notifyBuild(currentBuild.result, "At Stage Assemble ", "", commit_Email)
            throw err
        }
    }

    stage("Copy war to workspace") {
        workspace = pwd()

        sh 'cp -R ./build/libs/*war .'
    }
    stage("Deploy a war to Docker image and Push") {
        try {
            //sh """${props['registry']}/${props['appname']}:${buildNumber} > imageNam.txt"""
            imageName = """${props['registry']}/${props['appname']}:${buildNumber}"""
            sh """buildNum=${buildNumber} >> hash_code.sh"""
            sh """export buildNum=${buildNumber}"""
            sh "source ./hash_code.sh"
            sh """docker build -t '${imageName}' ."""
        } catch (err) {
            currentBuild.result = 'FAILURE'
            notifyBuild(currentBuild.result, "At Stage Docker build", "", commit_Email)
            throw err
        }
    }
    stage("ELK Stack") {
        try {
            sh "kubectl apply -f elasticsearch.yml"
            sh "kubectl apply -f logstash-configmap.yml"
            sh "sleep(20)"
            sh "envsubst '${CONFIG_HASH}' < logstash.yml  | kubectl apply -f -"
            sh "kubectl apply -f filebeat.yml"
            sh "kubectl apply -f kibana.yml"
        } catch (err) {
            currentBuild.result = 'FAILURE'
            notifyBuild(currentBuild.result, "At Stage Test", "", commit_Email)
            throw err
        }
    }
}
    
def notifyBuild(String buildStatus, String buildFailedAt, String bodyDetails, String commit_Email)
{
    buildStatus = buildStatus ?: 'SUCCESS'
    def details = """Please find attahcment for log and Check console output at ${BUILD_URL}\n \n "${bodyDetails}"
	\n"""
    emailext attachLog: true,
            recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
            body: details,
            subject: """${buildStatus}: Job ${JOB_NAME} [${BUILD_NUMBER}] ${buildFailedAt}""",
            to: """${commit_Email}"""
}
